# 로깅옵션
debug: false # 불필요한 debug log 삭제.
management:
  endpoints:
    web:
      exposure:
        include: "*" # actuator? endpoint? ??? ?? ?? ??????. ?? ???? ?? ??? ? ? ?? ??.

logging:
  level:
    com.example.projectboard: debug # ?? ????? ?????? loglevel? ??. ? ?????? ???? loglevel? ?? debug level? ?? set.
    org.springframework.web.servlet: debug # 위의 debug: false와 관련, 이 부분인 request, response 부분만 debug 허용
    org.hibernate.type.descriptor.sql.BasicBinder: trace # JPA 기술 사용 시, query로그를 디버그로 관찰 가능.

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/board
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    defer-datasource-initialization: true # 테스트용 데이터베이스 데이터를 생성할 수 있게함. resources 폴더 아래 data.sql 파일 생성하면 됨.
    hibernate:
      ddl-auto: create # entity나 database 설정들을 테스트가 실행될 때 자동으로 생성. -> db를 직접짤 필요가 없음.
    open-in-view: false
    show-sql: true # sql query 보기
    properties:
      hibernate:
        format_sql: true # spring data jpa 는 기본적으로 hibernate 에 종속. spring property 를 이용해 데이터 Set / 한줄로 나와야하는 debug query 문을 이쁘게 formatting.
        default_batch_fetch_size: 100 # jpa 에서 복잡한 쿼리를 사용할 때, 한번에 가져오게 함. -> N+1 문제를 해결할 수 있다.
  h2.console.enabled: false # In memory database 로 h2 사용시 웹 콘솔을 제공하는데, 사용안함.
  sql:
    init:
      mode: always # resources 에 만든 data.sql 을 언제 작동시킬지 룰을 정함. (NEVER / ALWAYS / EMBEDDED (Test 환경에서만 보게함) ) 이렇게 있다.

--- # yaml 파일은 ---을 기준으로 여러개의 document 생성 가능, 각 document 마다 다른 profile 지정

#spring:
#  activate:
#      on-profile: testdb # testdb profile 이 activate 되어있을 때, 이 property 를 읽어라. 테스트가 실행될 때 이 DB 설정 실행.
#  datasource: # 이 profile 사용시 datasource 로 이걸 사용하겠다.
#    url: jdbc:h2:mem:board;mode=mysql
#    driverClassName: org.h2.Driver
#  sql:
#    init:
#      mode: always
#  test.database.replace: none # @AutoConfigureTestDatabase(replace = Replace.NONE) 이 어노테이션을 여기서 이렇게 표현하면 전체적으로 적용된다.
